Neste exercicio eu crei a coleção "cats" que tem como objetivo ser um dataset referente à gestãp de um veterinário de gatos

Para a criação e população deste dataset eu criei um script em python que permite a criação de centenas de gatos (tbm podia ter feito isto em java mas dava mais trabalho e é so para gerar gatos aleatórios)
para usar so iniciar o servidor mongo com o port 8765 e correr o script
    python3 generateCats.py <numberOfCats>


Visto ser só preciso uma tabela para cada animal e existirem muito raramente relações n--m, uma base de dados baseada em documentos adequa-se a este uso

Exemplo de um gato:

{
	"_id" : ObjectId("6355a26ed50ec3555ac3f725"),
	"name" : "BONITA",
	"breed" : "British Shorthair",
	"color" : "cinnamon",
	"birthYear" : 2019,
	"weight" : 6,
	"Diet" : [
		"Sensitive Skin & Stomach Lamb & Rice Formula",
		"Development Chicken & Liver Entrée Classic Wet Cat Food"
	],
	"diseases" : [
		{
			"nome" : "Feline Lower Urinary Tract Diseases (FLUTD)",
			"discoveryYear" : 2021,
			"symptoms" : [
				"Pain",
				"Blood in Urine",
				"Frequent urination"
			]
		},
		{
			"nome" : "Heartworms",
			"discoveryYear" : 2019,
			"symptoms" : [
				"Weight Loss",
				"Lethargy"
			]
		},
		{
			"nome" : "Eye Problems",
			"discoveryYear" : 2020,
			"symptoms" : [
				"Dizziness"
			]
		}
	],
	"owner" : {
		"name" : "Jarret Wall",
		"city" : "Beja",
		"phone" : "948037927"
	}
}




Exercicio c)     6 find queries algumas foram implementadas no projecto maven "cats_queries"

	* findAdultCatsCity(city)

		encontra todos os gatos adultos de uma certa cidade


	* encontrar todos os gatos com sintomas "Dizziness" e "Fever"  

		findCatsWithSymptom(spt1, spt2)

		encontra gatos com dois sitomas especificos

	* encontrar o nome dos gatos e o numero de telemovel dos donos que tem pelo "orange" e são acima do peso medio

		findBigOrangeCat()

	* encontrar todos os gatos que tem uma doença com 2 sintomas especificos

		Exemplo em mongo cli
			> db.cats.find({"diseases": {$elemMatch: {$and: [{"symptoms": "Fever"},{"symptoms": "Weight loss"}]}}},{"name":1,"diseases":1,_id:0}).count()

		em java é a função findWith2Symptoms(Sympt1 , Sympt2)

	* encontrar todos os gatos que o nome começa por "MR." e comem comida com "Turkey" e tem pelo menos uma doença descoberta depois de 2016

		exemplo mongo cli
			> db.cats.find({"name": {$regex: ".*MR. .*"},"Diet":{$regex: ".*Turkey.*"},"diseases.discoveryYear": {$gt: 2016}},{}).pretty()

	* Usando o $where e verificando tamanho de arrays: Listar todos os cats que tem o doenças descobertas depois do ano de nascimento:

		> db.cats.find( {"diseases": { $exists: true, $not: {$size: 0} } ,$expr: { $lt: [ "$birthYear" , "$diseases.discoveryYear" ] } } ).pretty()
		// nao foi implementato em java porque parece mt longa
		
		
Exercicio d) 6 aggregate Queries

	* Querie que devolve as doenças mais comuns para cada raça de gato de  todos os gatos adultos (mais de 5 anos)

		> db.cats.aggregate([{$match: {"birthYear": {$gt: 2017}}},{ $unwind: "$diseases" },{$group: {_id: {breed: "$breed",disease: "$diseases.nome"}, count:{$sum:1}}}])
			{ "_id" : { "breed" : "Korn Ja", "disease" : "Constipation" }, "count" : 1 }
			{ "_id" : { "breed" : "Burmilla", "disease" : "Fleas" }, "count" : 1 }
			{ "_id" : { "breed" : "Mekong Bobtail", "disease" : "Feline Leukemia Virus" }, "count" : 1 }
			{ "_id" : { "breed" : "Javanese", "disease" : "Diabetes" }, "count" : 2 }

	* Querie que agrupa por sintomas comuns para gatos adultos e ordena dos mais comuns ao menos comuns

		> db.cats.aggregate([{ $unwind: "$diseases" },{$unwind: "$diseases.symptoms"},{$group: {_id: "$diseases.symptoms",count:{$sum:1} }},{$sort: {count: -1}}]).pretty()
			{ "_id" : "Weight loss", "count" : 322 }
			{ "_id" : "Fever", "count" : 247 }
			{ "_id" : "Diarrhea", "count" : 179 }
			{ "_id" : "Frequent urination", "count" : 139 }
			{ "_id" : "Change in appetite", "count" : 134 }

	* Querie que agrupa os gatos de uma raçã e de uma especifica cidade, so mostrando os que tem mais de 2 gatos por cidade e não mostrando o valor da soma usando $project

		> db.cats.aggregate([{$group: {_id: {breed: "$breed",city: "$owner.city"},count:{$sum:1} }},{$match: {count: {$gt: 2}}},{$project: {count: 0}}])
			{ "_id" : { "breed" : "Savannah", "city" : "Bragança" } }
			{ "_id" : { "breed" : "Selkirk Rex", "city" : "Guarda" } }
			{ "_id" : { "breed" : "Asian Semi-longhair", "city" : "Santarém" } }
			{ "_id" : { "breed" : "Dwarf cat, or Dwelf", "city" : "Lisbon" } }
			{ "_id" : { "breed" : "Oriental Longhair", "city" : "Santarém" } }

	* Querie que mostra todas as comidas que gatos com food allergies comem
	
		> db.cats.aggregate([{$match: {"diseases.nome": "Food Allergies" } },{ $unwind: "$Diet" },{$group: {_id: "$Diet"}}]).pretty()
			{ "_id" : "Development Chicken Entrée Grain Free Classic Wet Cat Food" }
			{ "_id" : "Development Chicken & Liver Entrée Classic Wet Cat Food" }
			{ "_id" : "Hairball Management Chicken & Rice Formula" }
			{ "_id" : "Indoor Salmon & Rice Formula" }

	* Querie que mostra o peso medio dos gatos com certa doença

		> db.cats.aggregate([{ $unwind: "$diseases" },{$match: {"birthYear": {$gt: 2017}}},{$group: {_id: "$diseases.nome", avaregeWeight: {$avg:"$weight"}}}]).pretty()
			{ "_id" : "Constipation", "avaregeWeight" : 5.6875 }
			{ "_id" : "Hyperthyroidism", "avaregeWeight" : 4.882352941176471 }
			{ "_id" : "High-Rise Syndrome", "avaregeWeight" : 5.615384615384615 }
			{ "_id" : "Heartworms", "avaregeWeight" : 4.916666666666667 }
		
	* Querie que mostra o numero de gatos de uma certa cor e cidade. Tem que ser mais de 10 gatos por cidade e estar ordenado por ordem decrescente

		> db.cats.aggregate([{$group: {_id: {color:  "$color", city: "$owner.city"}, count:{$sum:1}}}, {$match: {count : {$gt: 10}}},{$sort: {count: -1} }])
			{ "_id" : { "color" : "orange", "city" : "Évora" }, "count" : 17 }
			{ "_id" : { "color" : "fawn", "city" : "Aveiro" }, "count" : 15 }
			{ "_id" : { "color" : "red silver", "city" : "Aveiro" }, "count" : 15 }
			{ "_id" : { "color" : "red", "city" : "Porto" }, "count" : 14 }
			{ "_id" : { "color" : "sealpoint", "city" : "Portalegre" }, "count" : 13 }
			{ "_id" : { "color" : "cream", "city" : "Beja" }, "count" : 12 }
